#!<%= @real_ruby_path %>

require 'yaml'

$action = ARGV[0] ? ARGV[0] : 'none'
app = ARGV[1] ? ARGV[1] : 'all'
infoblock = ARGV[2] ? ARGV[2] : 'all'
NODENAME = %x{hostname}.gsub("\n",'')

<% if @suppress_tp_warnings -%>
    suppress_warnings = " 2>&1 | grep -v 'Warning'"
<% else -%>
    suppress_warnings = ''
<% end -%>
<% if @suppress_tp_output -%>
    suppress_warnings = " >/dev/null 2>&1"
<% else -%>
    suppress_warnings = suppress_warnings
<% end -%>

TP_APP_DIR = '<%= @tp_dir %>/app'
TP_TEST_DIR = '<%= @tp_dir %>/test'
TP_INFO_DIR = '<%= @tp_dir %>/info'
TP_RUN_INFO_DIR = '<%= @tp_dir %>/run_info'

<% if @osfamily == 'windows' -%>
TINYDATA_DIRS = [
  "#{ENV['HOMEPATH']}/.puppetlabs/etc/code/modules/tinydata/data",
  - 'C:/Program Files/Puppet Labs/Puppet/puppet/modules/tinydata/data'
  '/'
]
<% else -%>
TINYDATA_DIRS = [
  "#{ENV['HOME']}/.puppetlabs/etc/code/modules/tinydata/data",
  '/etc/puppetlabs/code/environments/production/modules/tinydata/data',
  '/etc/puppetlabs/code/modules/tinydata/data',
  '/etc/puppet/code/modules/tinydata/data',
  '/'
]
<% end -%>
TINYDATA_DIR = TINYDATA_DIRS.find { |d| Dir.exist?(d) }
COMMAND_REDIR = ' > /dev/null 2>&1'

TP_APPS = Dir.entries(TP_APP_DIR).reject { |f| File.directory?(f) }

# Trap CTRL+C cleanly (in tp log)
trap("INT") { puts 'Exiting...'; exit }

def usage
  print <<EOF
Usage: tp <action> [app] [args]

Available actions (some may have extra args):

install: Install the given application with tp
uninstall: Uninstall the given application with tp
test: Test if the given (or all) application is correctly working
log: Tail the logs of the given (or all) application (CTRL+C to exit)
list: List all the applications for which tinydata is present
info: Show all info on a given application or the topic specified by args 
version: Show the version of apps managed with tp

Current applications installed via tp (you can use tp test, info and log with them):
EOF
puts TP_APPS
end

def check_yaml(app)
  begin
    result = YAML.load_file(TP_APP_DIR + "/#{app}")
  rescue
    result = {}
  end
end

def echo_ok(text)
  puts "\e[32m#{text} OK\e[0m\n"
end
def echo_fail(text)
  puts("\e[31m#{text} FAIL\e[0m\n")
end
def echo_title(text)
  puts "\n\e[34m#{text}\e[0m\n"
end
def echo_command(text)
  puts "\n\e[35m#{text}\e[0m\n"
end

def run_command(command,output)
  system(command)
  result = $?
  if result == 0
    echo_ok(output)
  else
    echo_fail(output)
    $error_exit = 1
  end
end

def show_command(command,output)
  puts output
  system(command)
  puts
end

def tp_test(app)
  begin
    settings = check_yaml app

    # Run custom test script if exists
    if File.exists?(TP_TEST_DIR + "/#{app}")
      run_command("#{TP_TEST_DIR}/#{app} #{COMMAND_REDIR}" , "#{NODENAME} - #{app} - custom: #{TP_TEST_DIR}/#{app}")
    end

    # Check repo if defined
    if settings['repo_package_url'] or settings['repo_url'] or settings['yum_mirrorlist'] or settings['repo_file_url']
      repo_filename = settings['repo_filename'] ? settings['repo_filename'] : app
      repo_path = "<%= @options['check_repo_path'] %>#{repo_filename}<%= @options['check_repo_path_post'] %>"
      run_command("test -f #{repo_path}" , "#{NODENAME} - #{app} - repo: #{repo_path}")
    end

    # Check package if defined
    if settings['package_name'] and settings['package_name'] != ""
      Array(settings['package_name']).each do |s|
        if settings['package_provider'] == 'gem'
          run_command("gem list | grep  " + s + " " + COMMAND_REDIR , "#{NODENAME} - #{app} - package: #{s}")
        elsif settings['package_provider'] == 'puppet_gem'
          run_command("/opt/puppetlabs/puppet/bin/gem list | grep  " + s + " " + COMMAND_REDIR , "#{NODENAME} - #{app} - package: #{s}")
        elsif settings['package_provider'] == 'pip'
          run_command("pip list | grep  " + s + " " + COMMAND_REDIR , "#{NODENAME} - #{app} - package: #{s}")
        else
          run_command("<%= @options['check_package_command'] %> #{s} #{COMMAND_REDIR}" , "#{NODENAME} - #{app} - package: #{s}")
        end
      end
    end

    # Check service if defined
    if settings['service_name'] and settings['service_name'] != ""
      Array(settings['service_name']).each do |s|
        run_command("<%= @options['check_service_command'] %> #{s} <%= @options['check_service_command_post'] %> #{COMMAND_REDIR}" , "#{NODENAME} - #{app} - service: #{s}")
      end
    end

  rescue
    raise ArgumentError.new("#{app} not found in " + TP_APP_DIR)
  end
end

def tp_info(app,infoblock='all')
  begin
    settings = check_yaml app

    # Run custom test script if exists under /etc/tp/info/
    if File.exists?(TP_INFO_DIR + "/#{app}")
      run_command(TP_INFO_DIR + "/#{app}" , "#{NODENAME} - #{app} - #{TP_INFO_DIR}/#{app}")
    end
    
    # Run default checks via /etc/tp/run_info.sh
    if infoblock != 'all'
      run_command("<%= @options['info_script_path'] %> " + app + ' ' + infoblock , "#{NODENAME} - #{app} - #{infoblock}")
    else
      run_command("<%= @options['info_script_path'] %> " + app , "#{NODENAME} - #{app} - info")
    end

    # Extra tinydata commands
    if settings['info_commands']
      settings['info_commands'].each do |k,v|
        if infoblock != 'all'
          if infoblock.to_s == k.to_s
            run_command(v , "#{NODENAME} - #{app} - #{k}: #{v}")
          end
        else
          run_command(v , "#{NODENAME} - #{app} - #{k}: #{v}")
        end
      end
    end

  rescue
    raise ArgumentError.new("#{app} info got errors")
  end
end

def tp_version(app)
  begin
    settings = check_yaml app
    if settings['package_name']
      # Version command from tinydata or default
      if settings['version_command']
        show_command(settings['version_command'], "#{NODENAME} - #{app}: #{settings['version_command']}")
      else
        show_command("#{app} --version" , "#{NODENAME} - #{app}: #{app} --version")
      end
    end
  rescue
    puts ''
  end
end




# ACTIONS selection
case $action
when 'test'
  $error_exit=0
  if app == 'all'
    TP_APPS.each do |a|
      a.send("tp_test", a)
    end
    OTHER_TESTS = Dir.entries(TP_TEST_DIR).reject { |f| TP_APPS.include?(f) || File.directory?(f) }
    OTHER_TESTS.each do |a|
      a.send("tp_test", a)
    end
  else
    app.send("tp_test", app)
  end
  if $error_exit == 0
    puts "\n\e[32mAll tests OK\e[0m\n"
  else
    puts "\n\e[31mSome test in ERROR\e[0m\n"
  end
  exit($error_exit)

when 'log'
  logs = []
  if app == 'all'
    TP_APPS.each do |f|
      settings = check_yaml f
      logs << settings['log_file_path']
      if settings['log_dir_path']
        logs << settings['log_dir_path'] + "/*.log"
      end
    end
  else
    settings = check_yaml app
    logs << settings['log_file_path']
    if settings['log_dir_path']
      logs << settings['log_dir_path'] + "/*.log"
    end
  end
  system("tail -f " + logs.uniq.join(' '))

when 'list'
  if TINYDATA_DIR != '/'
    tinydata_app = Dir.entries(TINYDATA_DIR).sort.reject { |f| File.directory?(f) }
    puts tinydata_app
  else
    puts "Tinydata module not found. Can't list available apps"
  end

when 'install'
  if TINYDATA_DIR != '/'
    exec ("puppet apply -t -e 'tp::install { " + app + ": auto_prereq => true , cli_enable => true }'" + suppress_warnings)
  else
    puts "You can't install apps with tp wihout having the tp module locally installed"
  end

when 'uninstall'
  if TINYDATA_DIR != '/'
    exec ("puppet apply -t -e 'tp::install { " + app + ": ensure => absent }'" + suppress_warnings)
  else
    puts "You can't uninstall apps with tp wihout having the tp module locally installed"
  end

when 'info'
  $error_exit=0
  if app == 'all'
    TP_APPS.each do |a|
      a.send("tp_info", a, infoblock)
    end
    OTHER_INFOS = Dir.entries(TP_INFO_DIR).reject { |f| TP_APPS.include?(f) || File.directory?(f) }
    OTHER_INFOS.each do |a|
      a.send("tp_info", a, infoblock)
    end
  else
    app.send("tp_info", app, infoblock)
  end
  if $error_exit == 0
    puts "\n\e[32mAll info OK\e[0m\n"
  else
    puts "\n\e[31mSome info FAILED\e[0m\n"
  end
  exit($error_exit)

when 'version'
  if app == 'all'
    TP_APPS.each do |a|
      a.send("tp_version", a)
    end
  else
    app.send("tp_version", app)
  end
  exit

else
  usage

end
